"""
HTML dashboard generator for pitch deck evaluation results.
Creates interactive dashboard with embedded visualizations and sortable tables.
"""
import base64
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from ..models.data_models import EvaluationResult
from ..results.results_aggregator import RankedResults
from .summary_table_generator import SummaryTableGenerator


class HTMLDashboard:
    """
    Generates interactive HTML dashboard displaying all evaluation results.
    Includes embedded visualizations, sortable tables, and responsive design.
    """
    
    def __init__(self):
        """Initialize the HTML dashboard generator."""
        self.table_generator = SummaryTableGenerator()
    
    def generate_dashboard(self, ranked_results: RankedResults, 
                          visualization_paths: Optional[Dict[str, str]] = None,
                          output_dir: str = "results") -> str:
        """
        Generate complete HTML dashboard with all results and visualizations.
        
        Args:
            ranked_results: Aggregated evaluation results
            visualization_paths: Dictionary mapping visualization names to file paths
            output_dir: Directory to save the dashboard
            
        Returns:
            Path to the generated HTML dashboard file
        """
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        dashboard_file = output_path / "pitch_deck_evaluation_dashboard.html"
        
        # Generate HTML content
        html_content = self._generate_html_content(ranked_results, visualization_paths)
        
        # Write to file
        with open(dashboard_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(dashboard_file)
    
    def _generate_html_content(self, ranked_results: RankedResults, 
                              visualization_paths: Optional[Dict[str, str]] = None) -> str:
        """
        Generate the complete HTML content for the dashboard.
        
        Args:
            ranked_results: Aggregated evaluation results
            visualization_paths: Dictionary mapping visualization names to file paths
            
        Returns:
            Complete HTML content as string
        """
        # Generate data for JavaScript
        js_data = self._prepare_javascript_data(ranked_results)
        
        # Generate embedded visualizations
        embedded_visualizations = self._embed_visualizations(visualization_paths or {})
        
        # Generate table HTML
        summary_table_html = self._generate_summary_table_html(ranked_results)
        statistics_table_html = self._generate_statistics_table_html(ranked_results)
        top_bottom_tables_html = self._generate_top_bottom_tables_html(ranked_results)
        
        # Generate overview cards
        overview_cards_html = self._generate_overview_cards(ranked_results)
        
        html_template = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pitch Deck Evaluation Dashboard</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>Pitch Deck Evaluation Dashboard</h1>
            <p class="subtitle">Comprehensive analysis of startup pitch decks using NLP and multi-dimensional scoring</p>
        </header>
        
        <div class="overview-section">
            <h2>Overview</h2>
            {overview_cards_html}
        </div>
        
        <div class="visualizations-section">
            <h2>Visualizations</h2>
            {embedded_visualizations}
        </div>
        
        <div class="tables-section">
            <h2>Detailed Results</h2>
            
            <div class="table-container">
                <h3>Summary Results</h3>
                {summary_table_html}
            </div>
            
            <div class="table-container">
                <h3>Performance Statistics</h3>
                {statistics_table_html}
            </div>
            
            {top_bottom_tables_html}
        </div>
        
        <footer class="footer">
            <p>Generated by Pitch Deck NLP Evaluator | Data processed on {self._get_current_timestamp()}</p>
        </footer>
    </div>
    
    <script>
        {self._get_javascript_code(js_data)}
    </script>
</body>
</html>
        """
        
        return html_template
    
    def _get_css_styles(self) -> str:
        """Generate CSS styles for the dashboard."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .overview-section, .visualizations-section, .tables-section {
            margin-bottom: 40px;
        }
        
        .overview-section h2, .visualizations-section h2, .tables-section h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.8em;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
        }
        
        .overview-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .overview-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .overview-card:hover {
            transform: translateY(-5px);
        }
        
        .overview-card h3 {
            color: #667eea;
            margin-bottom: 10px;
            font-size: 1.2em;
        }
        
        .overview-card .value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .overview-card .label {
            color: #666;
            font-size: 0.9em;
        }
        
        .visualizations-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .visualization-item {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .visualization-item h4 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        
        .visualization-item img {
            max-width: 100%;
            height: auto;
            border-radius: 5px;
        }
        
        .table-container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            overflow-x: auto;
        }
        
        .table-container h3 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.4em;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #667eea;
            color: white;
            font-weight: 600;
            cursor: pointer;
            user-select: none;
            position: relative;
        }
        
        th:hover {
            background-color: #5a6fd8;
        }
        
        th.sortable::after {
            content: ' ↕';
            opacity: 0.5;
        }
        
        th.sort-asc::after {
            content: ' ↑';
            opacity: 1;
        }
        
        th.sort-desc::after {
            content: ' ↓';
            opacity: 1;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f0f0f0;
        }
        
        .score-cell {
            font-weight: bold;
        }
        
        .score-high {
            color: #28a745;
        }
        
        .score-medium {
            color: #ffc107;
        }
        
        .score-low {
            color: #dc3545;
        }
        
        .top-bottom-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }
        
        .footer {
            text-align: center;
            padding: 20px;
            color: #666;
            border-top: 1px solid #ddd;
            margin-top: 40px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .overview-cards {
                grid-template-columns: 1fr;
            }
            
            .visualizations-grid {
                grid-template-columns: 1fr;
            }
            
            .top-bottom-section {
                grid-template-columns: 1fr;
            }
            
            table {
                font-size: 0.9em;
            }
            
            th, td {
                padding: 8px;
            }
        }
        
        .no-data {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 40px;
        }
        """
    
    def _prepare_javascript_data(self, ranked_results: RankedResults) -> Dict[str, Any]:
        """Prepare data for JavaScript functionality."""
        if not ranked_results.ranked_results:
            return {}
        
        # Prepare summary data for JavaScript
        summary_data = []
        for rank, result in enumerate(ranked_results.ranked_results, 1):
            summary_data.append({
                'rank': rank,
                'deck_name': result.deck_name,
                'composite_score': round(result.composite_score, 2),
                'problem_clarity': round(result.section_scores.problem_clarity, 2),
                'market_potential': round(result.section_scores.market_potential, 2),
                'traction_strength': round(result.section_scores.traction_strength, 2),
                'team_experience': round(result.section_scores.team_experience, 2),
                'business_model': round(result.section_scores.business_model, 2),
                'vision_moat': round(result.section_scores.vision_moat, 2),
                'overall_confidence': round(result.section_scores.overall_confidence, 2),
                'industry_category': result.industry_category,
                'confidence_level': round(result.confidence_level, 2),
                'investability_insight': result.investability_insight
            })
        
        return {
            'summary_data': summary_data,
            'statistics': ranked_results.score_statistics
        }
    
    def _get_javascript_code(self, js_data: Dict[str, Any]) -> str:
        """Generate JavaScript code for interactive functionality."""
        return f"""
        // Data for JavaScript functionality
        const dashboardData = {json.dumps(js_data)};
        
        // Table sorting functionality
        function sortTable(tableId, columnIndex, dataType = 'string') {{
            const table = document.getElementById(tableId);
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const header = table.querySelectorAll('th')[columnIndex];
            
            // Determine sort direction
            let ascending = true;
            if (header.classList.contains('sort-asc')) {{
                ascending = false;
                header.classList.remove('sort-asc');
                header.classList.add('sort-desc');
            }} else {{
                // Remove all sort classes from headers
                table.querySelectorAll('th').forEach(th => {{
                    th.classList.remove('sort-asc', 'sort-desc');
                }});
                header.classList.add('sort-asc');
            }}
            
            // Sort rows
            rows.sort((a, b) => {{
                const aValue = a.cells[columnIndex].textContent.trim();
                const bValue = b.cells[columnIndex].textContent.trim();
                
                let comparison = 0;
                if (dataType === 'number') {{
                    comparison = parseFloat(aValue) - parseFloat(bValue);
                }} else {{
                    comparison = aValue.localeCompare(bValue);
                }}
                
                return ascending ? comparison : -comparison;
            }});
            
            // Reorder rows in table
            rows.forEach(row => tbody.appendChild(row));
        }}
        
        // Add click handlers to sortable headers
        document.addEventListener('DOMContentLoaded', function() {{
            const sortableHeaders = document.querySelectorAll('th.sortable');
            sortableHeaders.forEach((header, index) => {{
                header.addEventListener('click', function() {{
                    const tableId = this.closest('table').id;
                    const dataType = this.dataset.type || 'string';
                    sortTable(tableId, index, dataType);
                }});
            }});
            
            // Apply score coloring
            applyScoreColoring();
        }});
        
        // Apply color coding to score cells
        function applyScoreColoring() {{
            const scoreCells = document.querySelectorAll('.score-cell');
            scoreCells.forEach(cell => {{
                const score = parseFloat(cell.textContent);
                if (score >= 7.0) {{
                    cell.classList.add('score-high');
                }} else if (score >= 5.0) {{
                    cell.classList.add('score-medium');
                }} else {{
                    cell.classList.add('score-low');
                }}
            }});
        }}
        """
    
    def _embed_visualizations(self, visualization_paths: Dict[str, str]) -> str:
        """Embed visualizations as base64 images in HTML."""
        if not visualization_paths:
            return '<div class="no-data">No visualizations available</div>'
        
        visualizations_html = '<div class="visualizations-grid">'
        
        visualization_titles = {
            'radar_chart': 'Dimension Scores Radar Chart',
            'score_histogram': 'Score Distribution Histogram',
            'correlation_heatmap': 'Dimension Correlation Heatmap',
            'ranking_chart': 'Deck Ranking Chart'
        }
        
        for viz_name, viz_path in visualization_paths.items():
            try:
                if Path(viz_path).exists():
                    with open(viz_path, 'rb') as img_file:
                        img_data = base64.b64encode(img_file.read()).decode('utf-8')
                        img_src = f"data:image/png;base64,{img_data}"
                        
                        title = visualization_titles.get(viz_name, viz_name.replace('_', ' ').title())
                        
                        visualizations_html += f"""
                        <div class="visualization-item">
                            <h4>{title}</h4>
                            <img src="{img_src}" alt="{title}">
                        </div>
                        """
            except Exception as e:
                print(f"Warning: Could not embed visualization {viz_name}: {e}")
        
        visualizations_html += '</div>'
        return visualizations_html
    
    def _generate_overview_cards(self, ranked_results: RankedResults) -> str:
        """Generate overview cards with key statistics."""
        if not ranked_results.ranked_results:
            return '<div class="no-data">No data available</div>'
        
        total_decks = len(ranked_results.ranked_results)
        avg_score = ranked_results.average_scores.get('composite_score', 0)
        top_score = ranked_results.ranked_results[0].composite_score if ranked_results.ranked_results else 0
        top_performer = ranked_results.ranked_results[0].deck_name if ranked_results.ranked_results else "N/A"
        
        return f"""
        <div class="overview-cards">
            <div class="overview-card">
                <h3>Total Decks</h3>
                <div class="value">{total_decks}</div>
                <div class="label">Analyzed</div>
            </div>
            <div class="overview-card">
                <h3>Average Score</h3>
                <div class="value">{avg_score:.1f}</div>
                <div class="label">Out of 100</div>
            </div>
            <div class="overview-card">
                <h3>Top Score</h3>
                <div class="value">{top_score:.1f}</div>
                <div class="label">Highest Rating</div>
            </div>
            <div class="overview-card">
                <h3>Top Performer</h3>
                <div class="value" style="font-size: 1.5em;">{top_performer}</div>
                <div class="label">Best Deck</div>
            </div>
        </div>
        """
    
    def _generate_summary_table_html(self, ranked_results: RankedResults) -> str:
        """Generate HTML for the summary results table."""
        df = self.table_generator.generate_summary_table(ranked_results)
        if df.empty:
            return '<div class="no-data">No summary data available</div>'
        
        html = '<table id="summary-table">'
        
        # Generate header
        html += '<thead><tr>'
        for i, col in enumerate(df.columns):
            data_type = 'number' if col in ['Rank', 'Final Score', 'Problem Clarity', 'Market Potential', 
                                          'Traction Strength', 'Team Experience', 'Business Model', 
                                          'Vision/Moat', 'Overall Confidence', 'Analysis Confidence'] else 'string'
            html += f'<th class="sortable" data-type="{data_type}">{col}</th>'
        html += '</tr></thead>'
        
        # Generate body
        html += '<tbody>'
        for _, row in df.iterrows():
            html += '<tr>'
            for i, (col, value) in enumerate(row.items()):
                css_class = ''
                if col in ['Final Score', 'Problem Clarity', 'Market Potential', 'Traction Strength', 
                          'Team Experience', 'Business Model', 'Vision/Moat', 'Overall Confidence']:
                    css_class = 'score-cell'
                html += f'<td class="{css_class}">{value}</td>'
            html += '</tr>'
        html += '</tbody>'
        
        html += '</table>'
        return html
    
    def _generate_statistics_table_html(self, ranked_results: RankedResults) -> str:
        """Generate HTML for the statistics table."""
        df = self.table_generator.generate_statistics_table(ranked_results)
        if df.empty:
            return '<div class="no-data">No statistics data available</div>'
        
        html = '<table id="statistics-table">'
        
        # Generate header
        html += '<thead><tr>'
        for col in df.columns:
            data_type = 'number' if col != 'Dimension' else 'string'
            html += f'<th class="sortable" data-type="{data_type}">{col}</th>'
        html += '</tr></thead>'
        
        # Generate body
        html += '<tbody>'
        for _, row in df.iterrows():
            html += '<tr>'
            for col, value in row.items():
                css_class = 'score-cell' if col != 'Dimension' else ''
                html += f'<td class="{css_class}">{value}</td>'
            html += '</tr>'
        html += '</tbody>'
        
        html += '</table>'
        return html
    
    def _generate_top_bottom_tables_html(self, ranked_results: RankedResults) -> str:
        """Generate HTML for top 3 and bottom 3 tables."""
        tables = self.table_generator.generate_top_bottom_table(ranked_results)
        
        if not tables:
            return '<div class="no-data">No top/bottom data available</div>'
        
        html = '<div class="top-bottom-section">'
        
        # Top 3 table
        if 'top_3' in tables:
            html += '<div class="table-container">'
            html += '<h3>Top 3 Performers</h3>'
            html += '<table id="top-3-table">'
            
            df = tables['top_3']
            html += '<thead><tr>'
            for col in df.columns:
                data_type = 'number' if col in ['Rank', 'Final Score'] else 'string'
                html += f'<th class="sortable" data-type="{data_type}">{col}</th>'
            html += '</tr></thead>'
            
            html += '<tbody>'
            for _, row in df.iterrows():
                html += '<tr>'
                for col, value in row.items():
                    css_class = 'score-cell' if col == 'Final Score' else ''
                    html += f'<td class="{css_class}">{value}</td>'
                html += '</tr>'
            html += '</tbody>'
            html += '</table>'
            html += '</div>'
        
        # Bottom 3 table
        if 'bottom_3' in tables:
            html += '<div class="table-container">'
            html += '<h3>Bottom 3 Performers</h3>'
            html += '<table id="bottom-3-table">'
            
            df = tables['bottom_3']
            html += '<thead><tr>'
            for col in df.columns:
                data_type = 'number' if col in ['Rank', 'Final Score'] else 'string'
                html += f'<th class="sortable" data-type="{data_type}">{col}</th>'
            html += '</tr></thead>'
            
            html += '<tbody>'
            for _, row in df.iterrows():
                html += '<tr>'
                for col, value in row.items():
                    css_class = 'score-cell' if col == 'Final Score' else ''
                    html += f'<td class="{css_class}">{value}</td>'
                html += '</tr>'
            html += '</tbody>'
            html += '</table>'
            html += '</div>'
        
        html += '</div>'
        return html
    
    def _get_current_timestamp(self) -> str:
        """Get current timestamp for footer."""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")